WEBVTT

NOTE
This file was generated by Descript 

00:00:00.090 --> 00:00:04.230
Let's conclude this course with
talking about next steps, in particular

00:00:04.470 --> 00:00:06.540
automated deployment with GitHub actions.

00:00:07.260 --> 00:00:10.410
Let's walk through a high level overview
of how we integrate Git Flow with DABs.

00:00:11.080 --> 00:00:14.220
Git Flow is a branching model that
involves the use of feature branches

00:00:14.220 --> 00:00:15.570
and multiple primary branches.

00:00:16.079 --> 00:00:19.440
This workflow streamlines the process
of developing, testing, and deploying

00:00:19.440 --> 00:00:22.800
Databricks projects by leveraging
Git flow's structured branching model

00:00:23.070 --> 00:00:24.810
with GitHub actions for automation.

00:00:25.215 --> 00:00:28.425
The process begins on the very far
left of the screen here where the

00:00:28.425 --> 00:00:31.095
developer has created a feature
branch from the dev branch.

00:00:31.785 --> 00:00:35.505
This is where the individual features
or bug fixes are developed in isolation.

00:00:36.105 --> 00:00:38.925
Developers can deploy code
directly to the dev Databricks

00:00:38.925 --> 00:00:41.475
workspace using the Databricks CLI.

00:00:41.925 --> 00:00:45.375
Once the development on a feature branch
is complete, a pull request is open.

00:00:45.585 --> 00:00:48.675
After the code is peer reviewed,
it is merged into the dev branch.

00:00:48.885 --> 00:00:53.295
After merging into Dev, the next step
involves triggering the GitHub actions

00:00:53.685 --> 00:00:55.605
workflow for drafting a release.

00:00:55.995 --> 00:01:00.105
This deploys the changes to the
QA environment using DABs, runs

00:01:00.105 --> 00:01:04.425
tests, code coverage checks
and security scans, and finally

00:01:04.425 --> 00:01:06.135
creates the version release branch.

00:01:06.435 --> 00:01:09.765
It also creates a PR for the release
branch to be merged into Main.

00:01:10.245 --> 00:01:14.715
After the release PR is closed, it
triggers another GitHub actions workflow

00:01:14.715 --> 00:01:16.215
that deploys the bundle to prod.

00:01:16.800 --> 00:01:20.820
Creates a release tag and eventually a
PR for Main branch is merged into Dev.

00:01:21.120 --> 00:01:24.600
Finally, if a critical issue arises
in production, we handle it with a

00:01:24.600 --> 00:01:28.680
hot fix branch, which is branched from
Main and then merged back into both

00:01:28.680 --> 00:01:31.020
Main and Dev after the fix is applied.

00:01:31.530 --> 00:01:34.140
This ensures that our production
environment remains stable while

00:01:34.140 --> 00:01:36.150
allowing ongoing development to continue.

00:01:36.480 --> 00:01:38.490
Let second a moment to
review Git on Databricks.

00:01:38.820 --> 00:01:43.440
Git is a free and open-source software
framework designed to track changes in

00:01:43.440 --> 00:01:45.120
source code during software development.

00:01:45.450 --> 00:01:48.150
Some common Git tools and Git
based services are listed here

00:01:48.600 --> 00:01:54.030
such as Azure DevOps, GitHub,
GitLab, Bitbucket, and AWS.

00:01:54.840 --> 00:01:58.410
When integrating third party tools into
your workflows, make sure that it makes

00:01:58.410 --> 00:02:00.240
sense for your organization's needs.

